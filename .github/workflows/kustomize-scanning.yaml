# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the action will run. 
on:
  # Triggers the workflow on push or pull request events but only for the master branch
  push:
    branches: [ master, snyk-testing ]
  pull_request:
    branches: [ master, snyk-testing ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2

      # Install kubernetes tools
      - name: Install tools
        uses: yokawasa/action-setup-kube-tools@v0.7.1
        with:
          kustomize: '4.1.2'
          kubeval: '0.16.1'
          conftest: '0.18.2'
          yq: '4.9.1'
          kube-score: '1.11.0'
      - name: Install kube-linter
        run: |
          set -euo pipefail
          case "${{ runner.os }}" in
            macOS)   OS=darwin ;;
            Windows) OS=windows ;;
            *)       OS=linux ;;
          esac
          RELEASE_INFO=$(curl --silent --show-error --fail https://api.github.com/repos/stackrox/kube-linter/releases/latest)
          RELEASE_NAME=$(echo "${RELEASE_INFO}" | jq --raw-output ".name")
          LOCATION=$(echo "${RELEASE_INFO}" \
            | jq --raw-output ".assets[].browser_download_url" \
            | grep --fixed-strings kube-linter-${OS}.tar.gz)
          TARGET=kube-linter-${OS}-${RELEASE_NAME}.tar.gz
          # Skip downloading release if downloaded already, e.g. when the action is used multiple times.
          if [ ! -e $TARGET ]; then
            curl --silent --show-error --fail --location --output $TARGET "$LOCATION"
            tar -xf $TARGET
          fi
        shell: bash
      - name: Test tools
        continue-on-error: true
        run: |
          kustomize build argocd > testing/argocd.yaml && \
          ./kube-linter lint --format=sarif testing/argocd.yaml | tee testing/argocd.sarif
         # kube-score score --output-format sarif testing/argocd.yaml | tee testing/argocd.sarif && \
         # yq eval -i -P -j '.runs[0].conversion.tool.driver.name = "kube-score" | .runs[0].conversion.invocation.executionSuccessful = true' testing/argocd.sarif && \
         # for i in $(seq 0 $(($(yq eval '.runs[0].results | length' testing/argocd.sarif) - 1))); do yq -i -P -j eval ".runs[0].results[$i].locations[0].physicalLocation.region.startLine = $(yq eval \".runs[0].results[$i].locations[0].physicalLocation.contextRegion.startLine\" testing/argocd.sarif)" testing/argocd.sarif; done
      - name: Upload result to GitHub Code Scanning
        uses: github/codeql-action/upload-sarif@v1
        with:
          sarif_file: testing/argocd.sarif
